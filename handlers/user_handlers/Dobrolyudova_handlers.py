import datetime  # –î–∞—Ç–∞
import random
import sqlite3  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
import time
from datetime import date

from aiogram import types  # –¢–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from aiogram.dispatcher import FSMContext  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from aiogram.dispatcher.filters.state import StatesGroup, State
from loguru import logger

from database.database import recording_the_data_of_users_who_launched_the_bot
from database.database import retrieve_user_bonus
from keyboards.bonus_keyboards import dobrolyudova_keyboards
from messages.bonus_text import random_dob
from messages.greeting_post import greeting_post_nizhniy_novgorod
from system.dispatcher import dp, bot  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


class MakingAnOrderDobrolyudova(StatesGroup):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    write_phone_dobrolyudova = State()


@dp.callback_query_handler(lambda c: c.data == "dobrolyudova")
async def dobrolyudova_button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()
        await state.reset_state()
        username = callback_query.from_user.username  # Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ Telegram
        current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        logger.info(f'–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±—Ä–æ–ª—é–±–æ–≤–∞" {callback_query.from_user.id, username, current_date}')
        recording_the_data_of_users_who_launched_the_bot(callback_query.message, current_date)
        logger.info(f'–ü—Ä–∏–≤–µ—Ç! –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /start {callback_query.from_user.id, username, current_date}')
        keyboards_greeting = dobrolyudova_keyboards()
        await bot.send_message(callback_query.from_user.id, text=greeting_post_nizhniy_novgorod,
                               reply_markup=keyboards_greeting,
                               disable_web_page_preview=True,
                               parse_mode=types.ParseMode.HTML)
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@dp.callback_query_handler(lambda c: c.data == "dobrolyudova_kub")
async def share_number(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_dice(callback_query.from_user.id, emoji='üé≤')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ 'üé≤'
    time.sleep(5)
    user_id = callback_query.from_user.id
    today = date.today().strftime('%Y-%m-%d')
    plase = "–î–æ–±—Ä–æ–ª—é–±–æ–≤–∞, –¥.4"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
    user_key = f"{user_id}_{today}"  # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞

    existing_user = retrieve_user_bonus(user_key)

    if existing_user:
        text_error_bonus = "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è."
        await bot.answer_callback_query(callback_query.id, text_error_bonus)
        await state.finish()
        return
    text = "‚úÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è."
    await bot.send_message(callback_query.from_user.id, text)
    await MakingAnOrderDobrolyudova.write_phone_dobrolyudova.set()
    await state.update_data(user_id=user_id, today=today, plase=plase)


@dp.message_handler(state=MakingAnOrderDobrolyudova.write_phone_dobrolyudova)
async def write_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    data = await state.get_data()
    user_id = data.get('user_id')
    plase = data.get('plase')
    today = data.get('today')
    phone = message.text
    random_bonus = random.choice(random_dob)
    user_key = f"{user_id}_{today}"  # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ id –∏ user_key –≤ —Ç–∞–±–ª–∏—Ü–µ users_bonus
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users_bonus WHERE id=? AND user_key=?", (user_id, user_key))
    existing_user = cursor.fetchone()
    if existing_user:
        text_error_bonus = "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è."
        await bot.send_message(message.from_user.id, text_error_bonus)
        await state.finish()
        return
    cursor.execute(
        "INSERT INTO users_bonus (user_key, id, full_name, user_name, bonus, plase) VALUES (?, ?, ?, ?, ?, ?)",
        (user_key, user_id, message.from_user.full_name, phone, random_bonus, plase))

    conn.commit()
    await state.finish()
    bonus = (f"üéâ –£—Ä–∞! –ê –≤–æ—Ç –∏ —Ç–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞: {random_bonus}\n\n"

             f"–ü—Ä–µ–¥—ä—è–≤–∏ —ç—Ç—É –∑–∞–ø–∏—Å—å –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–π –ø—Ä–∏–∑ üèÜ\n\n"

             f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–æ–≤—ã–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏.\n"
             f"üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à <a href='https://t.me/instinkt_project_nn'>Telegram –∫–∞–Ω–∞–ª!</a>\n\n"

             f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏ /start.")
    await message.answer(bonus, disable_web_page_preview=True)


def register_dobrolyudova_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è Dobrolyudova"""
    dp.register_callback_query_handler(dobrolyudova_button_handler)
