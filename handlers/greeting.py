import datetime  # –î–∞—Ç–∞

from aiogram import F
from aiogram import types  # –¢–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from loguru import logger

from database.database import recording_the_data_of_users_who_launched_the_bot
from keyboards.bonus_keyboards import bonus_keyboards
from keyboards.greeting_keyboards import city_selection_keyboard, greeting_keyboards  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
from messages.greeting_post import greeting_post_nizhniy_novgorod
from system.dispatcher import dp, bot, router  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

logger.add('log/log.log', rotation='2 MB')


@dp.message(CommandStart())
async def greeting(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    await state.clear()

    current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    recording_the_data_of_users_who_launched_the_bot(message, current_date)
    logger.info(f'–ü—Ä–∏–≤–µ—Ç! –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /start {message.from_user.id, message.from_user.username, current_date}')
    city_selection_key = city_selection_keyboard()
    await message.answer('–ü—Ä–∏–≤–µ—Ç! üëã\n\n üåü –Ø —á–∞—Ç-–±–æ—Ç —Å–µ—Ç–∏ —Å–∞–ª–æ–Ω–æ–≤ <i>–ò–Ω—Å—Ç–∏–Ω–∫—Ç</i>\n\n üåü –õ—É—á—à–∏–π —Ä–µ–ª–∞–∫—Å –≤ —Ç–≤–æ–µ–º '
                         '–≥–æ—Ä–æ–¥–µ\n\n', reply_markup=city_selection_key, disable_web_page_preview=True,
                         parse_mode="HTML")


@router.callback_query(F.data == "nizhniy_novgorod_button")
async def moscow_button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await state.clear()

        current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        logger.info(
            f'–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥" {callback_query.from_user.id, callback_query.from_user.username, current_date}')
        recording_the_data_of_users_who_launched_the_bot(callback_query.message, current_date)
        logger.info(
            f'–ü—Ä–∏–≤–µ—Ç! –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /start {callback_query.from_user.id, callback_query.from_user.username, current_date}')
        keyboards_greeting = greeting_keyboards()
        await bot.send_message(callback_query.from_user.id, text=greeting_post_nizhniy_novgorod,
                               reply_markup=keyboards_greeting,
                               disable_web_page_preview=True,
                               parse_mode="HTML")
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@router.callback_query(F.data == "get_a_bonus")
async def get_a_bonus(callback_query: types.CallbackQuery):
    bonus_keyboard = bonus_keyboards()
    bonus_posts = '–í—ã–±–µ—Ä–µ—Ç–µ —Ñ–∏–ª–∏–∞–ª:'
    await bot.send_message(callback_query.from_user.id, bonus_posts, reply_markup=bonus_keyboard,
                           parse_mode="HTML")


def greeting_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    dp.register_message_handler(greeting)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
