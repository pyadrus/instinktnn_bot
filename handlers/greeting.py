import datetime  # –î–∞—Ç–∞
import os
import random
import sqlite3  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
import time
from datetime import date

import openpyxl
from aiogram import types  # –¢–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from aiogram.dispatcher import FSMContext  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from aiogram.dispatcher.filters.state import StatesGroup, State
from loguru import logger
from openpyxl.utils import get_column_letter

from database.database import get_export_bonus_from_database
from database.database import get_export_user_bonus_from_database
from database.database import recording_the_data_of_users_who_launched_the_bot
from database.database import retrieve_user_bonus
from keyboards.bonus_keyboards import bonus_keyboards, top_kub_keyboards, bottom_kub_keyboards
from keyboards.greeting_keyboards import city_selection_keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
from messages.bonus_text import random_bon, bonus_post
from system.dispatcher import dp, bot  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

logger.add('log/log.log', rotation='2 MB')


@dp.message_handler(commands=['start'])
async def greeting(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    await state.finish()
    await state.reset_state()
    current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    recording_the_data_of_users_who_launched_the_bot(message, current_date)
    logger.info(f'–ü—Ä–∏–≤–µ—Ç! –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /start {message.from_user.id, message.from_user.username, current_date}')
    city_selection_key = city_selection_keyboard()
    await message.answer('–ü—Ä–∏–≤–µ—Ç! üëã\n\n üåü –Ø —á–∞—Ç-–±–æ—Ç —Å–µ—Ç–∏ —Å–∞–ª–æ–Ω–æ–≤ <i>–ò–Ω—Å—Ç–∏–Ω–∫—Ç</i>\n\n üåü –õ—É—á—à–∏–π —Ä–µ–ª–∞–∫—Å –≤ —Ç–≤–æ–µ–º '
                         '–≥–æ—Ä–æ–¥–µ\n\n –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=city_selection_key, disable_web_page_preview=True,
                         parse_mode=types.ParseMode.HTML)


@dp.message_handler(commands=['export_bonus'])
async def export_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export_bonus"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in [5837917794, 5958542955]:  # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ  /export_bonus
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return

    data = get_export_bonus_from_database()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å–æ–≤

    wb = openpyxl.Workbook()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª Excel –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sheet = wb.active
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ['user_key', 'id', 'full_name', 'user_name', 'bonus', 'plase']
    for col_num, header in enumerate(headers, 1):
        col_letter = get_column_letter(col_num)
        sheet[f'{col_letter}1'] = header
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for row_num, row_data in enumerate(data, 2):
        for col_num, cell_data in enumerate(row_data, 1):
            col_letter = get_column_letter(col_num)
            sheet[f'{col_letter}{row_num}'] = cell_data

    wb.save('users_bonus.xlsx')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª Excel
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open('users_bonus.xlsx', 'rb') as file:
        await bot.send_document(message.from_user.id, file, caption='–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel')

    os.remove('users_bonus.xlsx')  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª Excel


@dp.message_handler(commands=['export_user'])
async def export_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export_user"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in [5837917794, 5958542955]:  # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ  /export_user
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return

    data = get_export_user_bonus_from_database()

    wb = openpyxl.Workbook()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª Excel –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sheet = wb.active
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ['ID', 'User ID', 'First Name', 'Last Name', 'Username', 'Date']
    for col_num, header in enumerate(headers, 1):
        col_letter = get_column_letter(col_num)
        sheet[f'{col_letter}1'] = header
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for row_num, row_data in enumerate(data, 2):
        for col_num, cell_data in enumerate(row_data, 1):
            col_letter = get_column_letter(col_num)
            sheet[f'{col_letter}{row_num}'] = cell_data

    wb.save('users.xlsx')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª Excel
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open('users.xlsx', 'rb') as file:
        await bot.send_document(message.from_user.id, file, caption='–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel')

    os.remove('users.xlsx')  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª Excel


@dp.callback_query_handler(lambda c: c.data == "get_a_bonus")
async def get_a_bonus(callback_query: types.CallbackQuery):
    bonus_keyboard = bonus_keyboards()
    bonus_posts = '–í—ã–±–µ—Ä–µ—Ç–µ —Ñ–∏–ª–∏–∞–ª:'
    await bot.send_message(callback_query.from_user.id, bonus_posts, reply_markup=bonus_keyboard,
                           parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == "top_pard")
async def get_a_bonus(callback_query: types.CallbackQuery):
    top_kub_keyboard = top_kub_keyboards()
    await bot.send_message(callback_query.from_user.id, bonus_post, reply_markup=top_kub_keyboard,
                           parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == "bottom_part")
async def get_a_bonus(callback_query: types.CallbackQuery):
    bottom_kub_keyboard = bottom_kub_keyboards()
    await bot.send_message(callback_query.from_user.id, bonus_post, reply_markup=bottom_kub_keyboard,
                           parse_mode=types.ParseMode.HTML)


class MakingAnOrder(StatesGroup):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    write_phone = State()


@dp.callback_query_handler(lambda c: c.data == "top_kub")
async def share_number(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_dice(callback_query.from_user.id, emoji='üé≤')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ 'üé≤'
    time.sleep(5)
    user_id = callback_query.from_user.id
    today = date.today().strftime('%Y-%m-%d')
    plase = "–î–æ–±—Ä–æ–ª—é–±–æ–≤–∞, –¥.4"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
    user_key = f"{user_id}_{today}"  # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞

    existing_user = retrieve_user_bonus(user_key)

    if existing_user:
        text_error_bonus = "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è."
        await bot.answer_callback_query(callback_query.id, text_error_bonus)
        await state.finish()
        return
    text = "‚úÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è."
    await bot.send_message(callback_query.from_user.id, text)
    await MakingAnOrder.write_phone.set()
    await state.update_data(user_id=user_id, today=today, plase=plase)


@dp.callback_query_handler(lambda c: c.data == "bottom_kub")
async def share_number(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_dice(callback_query.from_user.id, emoji='üé≤')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ 'üé≤'
    time.sleep(5)
    user_id = callback_query.from_user.id
    today = date.today().strftime('%Y-%m-%d')
    plase = "–ø—Ä–æ—Å–ø–µ–∫—Ç –ò–ª—å–∏—á–∞, –¥.25"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
    user_key = f"{user_id}_{today}"  # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞

    existing_user = retrieve_user_bonus(user_key)

    if existing_user:
        text_error_bonus = "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è."
        await bot.answer_callback_query(callback_query.id, text_error_bonus)
        await state.finish()
        return
    text = "‚úÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è."
    await bot.send_message(callback_query.from_user.id, text)
    await MakingAnOrder.write_phone.set()
    await state.update_data(user_id=user_id, today=today, plase=plase)


@dp.message_handler(state=MakingAnOrder.write_phone)
async def write_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    data = await state.get_data()
    user_id = data.get('user_id')
    plase = data.get('plase')
    today = data.get('today')
    phone = message.text
    random_bonus = random.choice(random_bon)
    user_key = f"{user_id}_{today}"  # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ id –∏ user_key –≤ —Ç–∞–±–ª–∏—Ü–µ users_bonus
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users_bonus WHERE id=? AND user_key=?", (user_id, user_key))
    existing_user = cursor.fetchone()
    if existing_user:
        text_error_bonus = "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è."
        await bot.send_message(message.from_user.id, text_error_bonus)
        await state.finish()
        return
    cursor.execute(
        "INSERT INTO users_bonus (user_key, id, full_name, user_name, bonus, plase) VALUES (?, ?, ?, ?, ?, ?)",
        (user_key, user_id, message.from_user.full_name, phone, random_bonus, plase))

    conn.commit()
    await state.finish()
    bonus = (f"üéâ –£—Ä–∞! –ê –≤–æ—Ç –∏ —Ç–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞: {random_bonus}\n\n"

             f"–ü—Ä–µ–¥—ä—è–≤–∏ —ç—Ç—É –∑–∞–ø–∏—Å—å –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–π –ø—Ä–∏–∑ üèÜ\n\n"

             f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–æ–≤—ã–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏.\n"
             f"üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à <a href='https://t.me/instinkt_project_nn'>Telegram –∫–∞–Ω–∞–ª!</a>\n\n"

             f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏ /start.")
    await message.answer(bonus, disable_web_page_preview=True)


def greeting_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    dp.register_message_handler(greeting)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
